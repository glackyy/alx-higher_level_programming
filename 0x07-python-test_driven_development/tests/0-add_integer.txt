
w to Use 0-add_integer.py
===========================

This module provides a function for adding two integers.

Usage
=====

The function `add_integer(a, b=98)` returns the addition of two integers.

Examples:

    >>> add_integer(2, 3)
    5

    >>> add_integer(2, -3)
    -1

The function also supports floating-point values, which are casted to integers before addition.

    >>> add_integer(2.0, 3.0)
    5

    >>> add_integer(2.9, 0.2)
    2

Floating-point and non-floating point values can be combined.

    >>> add_integer(2.3, -3)
    -1

The second argument `b` is optional and has a default value of 98. If `b` is not provided, it is set to 98.

    >>> add_integer(2)
    100

Non-Numbers
===========

The `add_integer()` function expects both arguments to be either integers or floats. If either argument is not an integer or float, a `TypeError` is raised.

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: a must be an integer or b must be an integer

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: a must be an integer or b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: a must be an integer or b must be an integer

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: a must be an integer or b must be an integer

If both arguments are non-integers and non-floats, a `TypeError` message is only printed for the first argument.

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: a must be an integer or b must be an integer

Special Cases
=============

The function will raise an `OverflowError` if infinity is provided as an argument.

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    OverflowError: cannot convert float infinity to integer

Similarly, the function will raise a `ValueError` if NaN (Not a Number) is provided.

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ValueError: cannot convert float NaN to integer

