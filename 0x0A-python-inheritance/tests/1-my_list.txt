Test for 1-my_list.py
-------------------------------------------

Case 0: Import
>>> MyList = __import__('1-my_list').MyList
>>>
Explanation: The "MyList" class is imported successfully.

-------------------------------------------

Case 1: Common Case
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]
>>>
Explanation: In this case, we create an instance of the MyList class and append multiple elements to the list. We print the original list, then use the print_sorted() method to print the list in sorted order. Finally, we print the original list again to verify that it remains unchanged.

-------------------------------------------

Case 2: Not Defined Object
>>> MyList = __import__('1-my_list').MyList
>>> my_list2.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'my_list2' is not defined
>>>
Explanation: This case attempts to call the print_sorted() method on an object that is not defined, resulting in a NameError.

-------------------------------------------

Case 3: Passed a List
>>> a = [1, 9, 4]
>>> my_list = MyList(a)
>>> my_list.print_sorted()
[1, 4, 9]
>>>
Explanation: In this case, we create an instance of the MyList class and pass a list as an argument. We then use the print_sorted() method to print the elements of the list in sorted order.

-------------------------------------------

Case 4: Empty List
>>> a = []
>>> my_list = MyList(a)
>>> my_list.print_sorted()
[]
>>>
Explanation: This case creates an instance of the MyList class with an empty list and uses the print_sorted() method, resulting in an empty output.

-------------------------------------------

Case 5: Unique Number
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.print_sorted()
[1]
>>> print(my_list)
[1]
>>>
Explanation: In this case, we create an instance of the MyList class and append a unique number to the list. We then use the print_sorted() method to print the sorted list, which contains only the unique number.

-------------------------------------------

Case 6: Same Number
>>> my_list2 = MyList()
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.append(1)
>>> my_list2.print_sorted()
[1, 1, 1, 1]
>>>
Explanation: This case demonstrates appending the same number multiple times to the list. When using the print_sorted() method, it prints the list with the same number repeated in sorted order.

-------------------------------------------

Case 7: Parent Object
>>> my_list = [1, 2, 3]
>>> my_list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'print_sorted'
>>>
Explanation: This case attempts to call the print_sorted() method on a regular list object, resulting in an AttributeError since the list object does not have the print_sorted() method.

-------------------------------------------

Case 8: Negative Numbers
>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> my_list.append(5)
>>> my_list.append(1)
>>> my_list.append(-1)
>>> my_list.append(51)
>>> my_list.append(-5)
>>> my_list.print_sorted()
[-5, -1, 1, 5, 51]
>>>
Explanation: In this case, we create an instance of the MyList class and append positive and negative numbers to the list. We use the print_sorted() method to print the list in sorted order, which includes both negative and positive numbers.


